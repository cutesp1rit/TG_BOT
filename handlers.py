from aiogram import Router, F
from aiogram.types import Message, FSInputFile, ForceReply, CallbackQuery
from aiogram.filters import CommandStart, Command
from app.telethon_functions import get_chat_members
from app.user import User
from app.chat import Chat
from app.states import DownloadCheque, DownloadList, GettingList, ModifyLists, RemoveDebt
from aiogram.fsm.context import FSMContext
from app.cheque import Cheque
import app.keyboards as kb
from aiogram.enums import ParseMode
from app.exceptions import IncorrectData
from os import remove
from app.product import Product
import app.long_messages as lm


# –¥–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫–∏ –∏ –∫—Ä–∞—Å–æ—Ç—É –≤ —Ü–µ–ª–æ–º
# –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å async - ?
# –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —á–µ–∫–æ–≤ - ?
# –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É help
# –ø—Ä–æ–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏
# –≤—ã–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∑–∞—á–µ—Ä–∫–∏–≤–∞—Ç—å -- DONE
# —É–±—Ä–∞—Ç—å —Å—Ç–æ–ø -- DONE
# —Å–¥–µ–ª–∞—Ç—å reply_markup —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - ?
# –≤–æ–∑–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é inline –∫–Ω–æ–ø–æ–∫ -- DONE
# inline –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–∞—Ç—ã -- DONE

router = Router()
dict_chats = dict()

async def check_data(message: Message):
    id = message.chat.id
    if (type(dict_chats.get(id, -1)) is int):
        dict_tmp = dict()
        chat_members = await get_chat_members(id)
        # —É–±–∏—Ä–∞–µ–º –±–æ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        chat_without_bot = [member for member in chat_members if member[-3:] != "bot"]
        for member in chat_without_bot:
            dict_tmp[member] = User(member, chat_without_bot)
        dict_chats[id] = Chat(dict_tmp)

@router.message(CommandStart())
async def cmd_start(message: Message):
    await check_data(message)
    curr_chat : Chat = dict_chats[message.chat.id]
    if (len(curr_chat.get_users()) == 1):
        await message.answer(lm.start_message_for_user, parse_mode=ParseMode.HTML)
    else:
        await message.answer(lm.start_message_for_chat, parse_mode=ParseMode.HTML)

@router.message(Command('help'))
async def cmd_download_cheque(message: Message, state: FSMContext):
    await check_data(message)
    await message.answer(lm.help_message, parse_mode=ParseMode.HTML)

@router.message(Command('download_cheque'))
async def cmd_download_cheque(message: Message, state: FSMContext):
    await check_data(message)
    curr_chat : Chat = dict_chats[message.chat.id]
    curr_chat.new_cheque(Cheque(curr_chat.get_users(), message.from_user.username))
    curr_chat.users_[message.from_user.username].new_cheque(curr_chat.last_cheque_)
    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤ —á–µ–∫–µ üßæ:")
    await state.set_state(DownloadCheque.count_of_positions)

@router.message(Command('get_my_debts'))
async def cmd_get_my_debts(message: Message):
    await check_data(message)
    curr_chat : Chat = dict_chats[message.chat.id]
    curr_user : User = curr_chat.users_[message.from_user.username]
    await message.reply(curr_user.get_own_debts(), parse_mode=ParseMode.HTML)
    

@router.message(Command('get_other_debts'))
async def cmd_get_other_debts(message: Message):
    await check_data(message)
    curr_chat : Chat = dict_chats[message.chat.id]
    curr_user : User = curr_chat.users_[message.from_user.username]
    await message.reply(curr_user.get_other_debts(), parse_mode=ParseMode.HTML)

@router.message(Command('get_last_cheque'))
async def cmd_get_last_cheque(message: Message):
    await check_data(message)
    curr_chat : Chat = dict_chats[message.chat.id]
    if (curr_chat.check_cheque()):
        creater = await curr_chat.get_cheque().get_cheque_image(message.chat.id)
        await message.answer_photo(photo=FSInputFile(f'data_cheque_{message.chat.id}_.png'))
        remove(f'data_cheque_{message.chat.id}_.png')
        await message.answer(f"–ï–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å: @{creater}")
    else:
        await message.reply("‚ùóÔ∏è –í—ã –µ—â–µ –Ω–µ —Å–æ—Å—Ç–∞–≤–ª—è–ª–∏ —á–µ–∫–∏, –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /download_cheque")

@router.message(Command('new_list'))
async def cmd_new_list(message: Message, state: FSMContext):
    await check_data(message)
    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ üìã:", reply_markup=kb.current_date_inline)
    await state.set_state(DownloadList.name_of_list)

@router.message(Command('remove_debt'))
async def cmd_remove_debt(message: Message, state: FSMContext):
    await check_data(message)
    curr_chat : Chat = dict_chats[message.chat.id]
    await state.update_data(user=message.from_user.username)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —Å–Ω—è—Ç—å –¥–æ–ª–≥ üí∞", reply_markup=kb.makeKeyboardForChoosingPeopleWithoutUser(curr_chat.users_[message.from_user.username].get_list_without_user()))
    await state.set_state(RemoveDebt.choose_person)

@router.message(Command('get_lists'))
async def cmd_get_lists(message: Message, state: FSMContext):
    await check_data(message)
    if (len(dict_chats[message.chat.id].get_dict_for_shop_lists_name()) == 0):
        await message.reply("–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ —Å–ø–∏—Å–∫–∏, –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /new_list")
        return
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å üëÄ:", reply_markup=kb.makeKeyboardForGettingLists(dict_chats[message.chat.id]))
    await state.set_state(GettingList.get_name)

@router.message(Command('modify_lists'))
async def cmd_modify_lists(message: Message, state: FSMContext):
    await check_data(message)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å ‚úçüèª:", reply_markup=kb.makeKeyboardForGettingLists(dict_chats[message.chat.id]))
    await state.set_state(ModifyLists.choose_list)

@router.message(GettingList.get_name)
async def gl_get_name(message: Message, state: FSMContext):
    curr_chat : Chat = dict_chats[message.chat.id]
    try:
        if not (message.text in curr_chat.get_dict_for_shop_lists_name()):
            raise IncorrectData
        if (await curr_chat.get_len_list(message.text) == 0):
            await message.reply(f"–≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –µ—â–µ –ø—É—Å—Ç, –¥–ª—è –µ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π: /modify_lists")
        else:
            list = await curr_chat.get_list(message.text)
            await message.reply(f'–°–ø–∏—Å–æ–∫ üìã <b>"{message.text}"</b>:\n\n{list}', parse_mode=ParseMode.HTML)
        await state.clear()
    except IncorrectData:
        await message.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ/–≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞–º–∏, –¥—Ä—É–≥–∏—Ö –Ω–µ—Ç..")
    except Exception as ex:
        await message.reply(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {ex}")

@router.message(ModifyLists.choose_list)
async def ml_get_name(message: Message, state: FSMContext):
    curr_chat : Chat = dict_chats[message.chat.id]
    try:
        if not (message.text in curr_chat.get_dict_for_shop_lists_name()):
            raise IncorrectData
        await state.update_data(name=message.text)
        await message.reply("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Å–ø–∏—Å–∫–æ–º.", reply_markup=kb.options_for_modification)
        await state.set_state(ModifyLists.choose_modification)
    except IncorrectData:
        await message.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ/–≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞–º–∏, –¥—Ä—É–≥–∏—Ö –Ω–µ—Ç..")
    except Exception as ex:
        await message.reply(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {ex}")

@router.message(ModifyLists.choose_modification)
async def ml_get_opt(message: Message, state: FSMContext):
    opt_mod = ["üóë —É–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫", "üßπ –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", "üóë —É–¥–∞–ª–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞", "‚úîÔ∏è –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–æ–∫", "‚úèÔ∏è –∑–∞—á–µ—Ä–∫–Ω—É—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"]
    curr_chat : Chat = dict_chats[message.chat.id]
    data = await state.get_data()
    try:
        if not (str(message.text).lower() in opt_mod):
            raise IncorrectData
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        low_message = str(message.text).lower()
        if low_message == opt_mod[0]:
            await curr_chat.delete_list(data["name"])
            await message.reply("–ú—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫!")
        elif low_message == opt_mod[1]:
            await curr_chat.clear_list(data["name"])
            await message.reply("–ú—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—Å—Ç–∏–ª–∏ –¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫!")
        elif low_message == opt_mod[2]:
            list = await curr_chat.get_list(data["name"])
            await message.answer(f"–í–æ—Ç —Å–ø–∏—Å–æ–∫:")
            await message.answer(f'–°–ø–∏—Å–æ–∫ üìã <b>"{data["name"]}"</b>:\n\n{list}', parse_mode=ParseMode.HTML)
            await message.reply("–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –≤–≤–æ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π.", reply_markup=kb.stop_inline)
            await state.set_state(ModifyLists.delete_products)
        elif low_message == opt_mod[3]:
            await state.set_state(DownloadList.choose_option)
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫:", reply_markup=kb.options_elementwise_or_not)
        else:
            list = await curr_chat.get_list(data["name"])
            await message.answer(f'–°–ø–∏—Å–æ–∫ <b>"{data["name"]}"</b>:\n\n{list}', parse_mode=ParseMode.HTML)
            await state.set_state(ModifyLists.cross_out_product)
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞—á–µ—Ä–∫–Ω—É—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞:", reply_markup=kb.options_elementwise_or_not)
    except IncorrectData:
        await message.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ/–≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞–º–∏, –¥—Ä—É–≥–∏—Ö –Ω–µ—Ç..")
    except Exception as ex:
        await message.reply(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {ex}")

@router.message(ModifyLists.cross_out_product)
async def dl_ch_opt(message: Message, state: FSMContext):
    arr_opt = ["–≤–≤–æ–¥–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ", "–≤–≤–µ—Å—Ç–∏ –≤—Å–µ –æ–¥–Ω–∏–º —Å–ø–∏—Å–∫–æ–º-—Å–æ–æ–±—â–µ–Ω–∏–µ–º"]
    try:
        if not (message.text.lower() in arr_opt):
            raise IncorrectData
        if (message.text.lower() == "–≤–≤–æ–¥–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ"):
            await state.set_state(ModifyLists.get_products)
            await message.reply("–•–æ—Ä–æ—à–æ, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –≤–≤–æ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π.", reply_markup=kb.stop_inline)
        else:
            await state.set_state(ModifyLists.get_list)
            await message.reply("–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –±—ã–ª –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –ü—Ä–∏–º–µ—Ä:")
            await message.answer('–ü–æ–º–∏–¥–æ—Ä—ã\n–û–≥—É—Ä—Ü—ã\n–•–ª–µ–±\n...')
    except IncorrectData:
        await message.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ/–≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞–º–∏, –¥—Ä—É–≥–∏—Ö –Ω–µ—Ç..")
    except Exception as ex:
        await message.reply(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {ex}")

@router.message(ModifyLists.get_list)
async def dl_get_list(message: Message, state: FSMContext):
    curr_chat : Chat = dict_chats[message.chat.id]
    data = await state.get_data()
    try:
        new_list = [product.lower() for product in message.text.split('\n')]
        if (type(curr_chat.dict_for_shop_lists_.get(data["name"], -1)) is int):
            await message.reply("–ì–æ—Ç–æ–≤–æ!")
            return
        for product in new_list:
            for thing in curr_chat.dict_for_shop_lists_[data["name"]]:
                if thing.get_name() == product.lower():
                    thing.mark_ = not(thing.get_mark())
                    break
        await message.reply(f"–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –±—ã–ª–∏ –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã!")
        await state.clear()
    except Exception as ex:
        await message.reply(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {ex}")

@router.message(ModifyLists.get_products)
async def dl_question(message: Message, state: FSMContext):
    curr_chat : Chat = dict_chats[message.chat.id]
    data = await state.get_data()
    product = message.text.lower()
    for thing in curr_chat.dict_for_shop_lists_[data["name"]]:
        if thing.get_name() == product.lower():
            thing.mark_ = not(thing.get_mark())
            await message.reply("–ß—Ç–æ –µ—â–µ?")
            return
    await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –Ω–∞—à–ª–∏ —ç—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ :(\n–ß—Ç–æ –µ—â–µ?", reply_markup=kb.stop_inline)

@router.message(ModifyLists.delete_products)
async def ml_del_prod(message: Message, state: FSMContext):
    curr_chat : Chat = dict_chats[message.chat.id]
    data = await state.get_data()
    try:
        if not(message.text.lower() in curr_chat.dict_for_shop_lists_[data["name"]]):
            raise IncorrectData
        curr_chat.dict_for_shop_lists_[data["name"]].remove(message.text.lower())
        await message.reply("–ß—Ç–æ –µ—â–µ?")
    except IncorrectData:
        await message.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ/–≤—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞, –¥—Ä—É–≥–∏—Ö –Ω–µ—Ç..")
    except Exception as ex:
        await message.reply(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {ex}")

@router.message(DownloadCheque.count_of_positions)
async def get_count_of_positions(message: Message, state: FSMContext):
    curr_chat : Chat = dict_chats[message.chat.id]
    try:
        if (int(message.text) == 0):
            raise ValueError
        await state.update_data(count_of_positions=int(message.text))
        curr_chat.count_pos_ = int(message.text)
        await state.set_state(DownloadCheque.product)
        await message.reply(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ ‚Ññ{curr_chat.flag_main_ + 1}:")
    except ValueError:
        await message.reply(f"‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –Ω–µ–Ω—É–ª–µ–≤–æ–µ —á–∏—Å–ª–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.")
    except Exception as ex:
        await message.reply(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {ex}")

@router.message(DownloadCheque.product)
async def get_name_of_product(message: Message, state: FSMContext):
    curr_chat : Chat = dict_chats[message.chat.id]
    await state.update_data(product=message.text)
    await state.set_state(DownloadCheque.price)
    await message.reply(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞ ‚Ññ{curr_chat.flag_main_ + 1}:")

@router.message(DownloadCheque.price)
async def get_price(message: Message, state: FSMContext):
    curr_chat : Chat = dict_chats[message.chat.id]
    try:
        await state.update_data(price=int(message.text))
        await state.set_state(DownloadCheque.num_people)
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç —Å–∫–∏–¥—ã–≤–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç ‚Ññ{curr_chat.flag_main_ + 1}:", reply_markup=kb.makeKeyboardForChoosingNum(message.chat.id, dict_chats))
    except ValueError:
        await message.reply(f"‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.")
    except Exception as ex:
        await message.reply(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {ex}")


@router.message(DownloadCheque.num_people)
async def get_num_of_people(message: Message, state: FSMContext):
    curr_chat : Chat = dict_chats[message.chat.id]
    try:
        if int(message.text) == 0:
            raise ValueError
        curr_chat.count_user_ = int(message.text)
        await state.set_state(DownloadCheque.person)
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –±—É–¥–µ—Ç —Å–∫–∏–¥—ã–≤–∞—Ç—å—Å—è –∑–∞ —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç (–∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)", reply_markup=kb.makeKeyboardForChoosingPeople(message.chat.id, dict_chats))
    except ValueError:
        await message.reply("‚ùóÔ∏è –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ/–≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–æ–µ –Ω–µ–Ω—É–ª–µ–≤–æ–µ —á–∏—Å–ª–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.")
    except Exception as ex:
        await message.reply(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {ex}")


@router.message(DownloadCheque.person)
async def get_names_of_people(message: Message, state: FSMContext):
    data = await state.get_data()
    curr_chat : Chat = dict_chats[message.chat.id]
    try:
        if not (message.text in curr_chat.get_users()):
            raise IncorrectData
        curr_chat.list_users_products_.append(message.text)
        curr_chat.flag_user_ += 1
        if (curr_chat.flag_user_ == curr_chat.count_user_):
            curr_chat.flag_user_ = 0
            curr_chat.flag_main_ += 1
            await curr_chat.last_cheque_.new_product(data["product"], int(data["price"]), curr_chat.list_users_products_.copy())
            curr_chat.list_users_products_ = list()
            if curr_chat.flag_main_ == curr_chat.count_pos_:
                await curr_chat.reset()
                await state.clear()
                await message.reply(f"–£—Ä–∞! üëè –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —É–∂–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à —á–µ–∫..")
                await curr_chat.last_cheque_.make_cheque(message.chat.id)
                await message.answer_photo(photo=FSInputFile(f'data_cheque_{message.chat.id}_.png'))
                remove(f'data_cheque_{message.chat.id}_.png')
                cur_user : User = curr_chat.users_[(curr_chat.get_cheque()).get_creater()]
                await cur_user.calculate_other_debts()
                for user in cur_user.list_without_user_:
                    await curr_chat.users_[user].calculate_own_debts(curr_chat.get_cheque())
                return
            await state.set_state(DownloadCheque.product)
            await message.reply(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ ‚Ññ{curr_chat.flag_main_ + 1}:")
            return
        await state.set_state(DownloadCheque.person)
        await message.reply(f"–ö—Ç–æ –µ—â–µ?", reply_markup=kb.makeKeyboardForChoosingPeople(message.chat.id, dict_chats))
    except IncorrectData:
        await message.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ/–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∫ –±–µ–∑ @ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ —á–∞—Ç–∞..")
    except Exception as ex:
        await message.reply(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {ex}")

@router.message(RemoveDebt.choose_person)
async def rd_choose_person(message: Message, state: FSMContext):
    curr_chat : Chat = dict_chats[message.chat.id]
    data = await state.get_data()
    try:
        if not (message.text in curr_chat.users_[data["user"]].get_list_without_user()):
            raise IncorrectData
        await state.update_data(debtor=message.text)
        await state.set_state(RemoveDebt.get_num)
        await message.reply("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–∞–∫–æ–≥–æ –¥–æ–ª–≥–∞ üí∞ (—á–∏—Å–ª–æ) —Å –Ω–µ–≥–æ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–Ω—è—Ç—å:")
    except IncorrectData:
        await message.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ/–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∫ –±–µ–∑ @ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –∞ —Ç–∞–∫–∂–µ –Ω–µ —Å–µ–±—è..", reply_markup=kb.makeKeyboardForChoosingPeopleWithoutUser(curr_chat.users_[data["user"]].get_list_without_user()))
    except Exception as ex:
        await message.reply(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {ex}")

@router.message(RemoveDebt.get_num)
async def rd_get_num(message: Message, state: FSMContext):
    curr_chat : Chat = dict_chats[message.chat.id]
    data = await state.get_data()
    try:
        await curr_chat.users_[data["user"]].remove_other_debt(data["debtor"], int(message.text))
        await curr_chat.users_[data["debtor"]].remove_own_debt(data["user"], int(message.text))
        await message.reply(f"–î–æ–ª–≥ –±—ã–ª —Å–Ω—è—Ç!")
        await state.clear()
    except ValueError:
        await message.reply("‚ùóÔ∏è –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ/–≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.")
    except Exception as ex:
        await message.reply(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {ex}")

@router.message(DownloadList.name_of_list)
async def get_name_of_list(message: Message, state: FSMContext):
    curr_chat : Chat = dict_chats[message.chat.id]
    if (not(type(curr_chat.dict_for_shop_lists_.get(message.text, -1)) is int)):
        await message.reply("‚ùóÔ∏è –°–ø–∏—Å–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    if (message.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è"):
        today = message.date
        if (not(type(curr_chat.dict_for_shop_lists_.get("{}.{}.{}".format(today.day, today.month, today.year), -1)) is int)):
            await message.reply("‚ùóÔ∏è –°–ø–∏—Å–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            return
        curr_chat.dict_for_shop_lists_["{}.{}.{}".format(today.day, today.month, today.year)] = list()
        await state.update_data(name="{}.{}.{}".format(today.day, today.month, today.year))
    else:
        curr_chat.dict_for_shop_lists_[message.text] = list()
        await state.update_data(name=message.text)
    await state.set_state(DownloadList.question)
    await message.reply("–û—Ç–ª–∏—á–Ω–æ! –•–æ—Ç–∏—Ç–µ —Å–µ–π—á–∞—Å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –Ω–µ–≥–æ?", reply_markup=kb.yes_or_no)

@router.message(DownloadList.question)
async def dl_question(message: Message, state: FSMContext):
    if (message.text.title() != "–î–∞" and message.text.title() != "–ù–µ—Ç"):
        await message.reply('‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–î–∞"/"–ù–µ—Ç"..', reply_markup=kb.yes_or_no)
    else:
        if (message.text.title() == "–ù–µ—Ç"):
            await message.reply("–•–æ—Ä–æ—à–æ, –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await state.clear()
        else:
            await state.set_state(DownloadList.choose_option)
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫:", reply_markup=kb.options_elementwise_or_not)

@router.message(DownloadList.choose_option)
async def dl_ch_opt(message: Message, state: FSMContext):
    arr_opt = ["–≤–≤–æ–¥–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ", "–≤–≤–µ—Å—Ç–∏ –≤—Å–µ –æ–¥–Ω–∏–º —Å–ø–∏—Å–∫–æ–º-—Å–æ–æ–±—â–µ–Ω–∏–µ–º"]
    try:
        if not (message.text.lower() in arr_opt):
            raise IncorrectData
        if (message.text.lower() == "–≤–≤–æ–¥–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ"):
            await state.set_state(DownloadList.get_products)
            await message.reply("–•–æ—Ä–æ—à–æ, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –≤–≤–æ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π.", reply_markup=kb.stop_inline)
        else:
            await state.set_state(DownloadList.get_list)
            await message.reply("–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –±—ã–ª –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –ü—Ä–∏–º–µ—Ä:")
            await message.answer('–ü–æ–º–∏–¥–æ—Ä—ã\n–û–≥—É—Ä—Ü—ã\n–•–ª–µ–±\n...')
    except IncorrectData:
        await message.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ/–≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞–º–∏, –¥—Ä—É–≥–∏—Ö –Ω–µ—Ç..")
    except Exception as ex:
        await message.reply(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {ex}")

@router.message(DownloadList.get_list)
async def dl_get_list(message: Message, state: FSMContext):
    curr_chat : Chat = dict_chats[message.chat.id]
    data = await state.get_data()
    try:
        new_list = [Product(product.lower()) for product in message.text.split('\n')]
        if (type(curr_chat.dict_for_shop_lists_.get(data["name"], -1)) is int):
            curr_chat.dict_for_shop_lists_[data["name"]] = list()
        curr_chat.dict_for_shop_lists_[data["name"]] += new_list
        await message.reply(f"–ì–æ—Ç–æ–≤–æ!")
        await state.clear()
    except Exception as ex:
        await message.reply(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {ex}")

@router.callback_query(F.data == "stop")
async def cq_stop(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–í–≤–æ–¥ –æ–∫–æ–Ω—á–µ–Ω.")
    await callback.message.reply("–•–æ—Ä–æ—à–æ, –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await state.clear()

@router.callback_query(F.data == "data989" and DownloadList.name_of_list)
async def get_name_of_list(callback: CallbackQuery, state: FSMContext):
    message = callback.message
    curr_chat : Chat = dict_chats[message.chat.id]
    today = message.date
    if (not(type(curr_chat.dict_for_shop_lists_.get("{}.{}.{}".format(today.day, today.month, today.year), -1)) is int)):
        await message.reply("‚ùóÔ∏è –°–ø–∏—Å–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    curr_chat.dict_for_shop_lists_["{}.{}.{}".format(today.day, today.month, today.year)] = list()
    await state.update_data(name="{}.{}.{}".format(today.day, today.month, today.year))
    await callback.answer("–°–µ–≥–æ–¥–Ω—è {}.{}.{}".format(today.day, today.month, today.year))
    await state.set_state(DownloadList.question)
    await message.reply("–û—Ç–ª–∏—á–Ω–æ! –•–æ—Ç–∏—Ç–µ —Å–µ–π—á–∞—Å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –Ω–µ–≥–æ?", reply_markup=kb.yes_or_no)

@router.message(DownloadList.get_products)
async def dl_question(message: Message, state: FSMContext):
    curr_chat : Chat = dict_chats[message.chat.id]
    data = await state.get_data()
    curr_chat.dict_for_shop_lists_[data["name"]].append(Product(message.text.lower()))
    await message.reply("–ß—Ç–æ –µ—â–µ?")
    

@router.message()
async def universal(message: Message):
    await check_data(message)